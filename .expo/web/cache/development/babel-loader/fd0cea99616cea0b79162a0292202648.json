{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\84913\\\\Desktop\\\\crabcounting\\\\front-end\\\\src\\\\screens\\\\result\\\\index.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from \"react-native-responsive-screen\";\nimport { Context } from \"../../context\";\nvar W = Dimensions.get(\"window\").width;\n\nvar ResultScreen = function ResultScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setUri = _useState2[1];\n\n  var _useContext = useContext(Context),\n      host = _useContext.host;\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      datePost = _useState4[0],\n      set_datePost = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type_ = _useState6[0],\n      set_Type = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      id_Client = _useState8[0],\n      set_id_Client = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      predict = _useState10[0],\n      set_Predict = _useState10[1];\n\n  var submitHandle = function submitHandle() {\n    var formData;\n    return _regeneratorRuntime.async(function submitHandle$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            formData = new FormData();\n            formData.append(\"file\", {\n              uri: image,\n              type: \"image/jpeg\",\n              name: \"image.jpg\"\n            });\n            formData.append(\"id_client\", 1);\n            formData.append(\"date_post\", moment().unix());\n            formData.append(\"types\", \"jpg\");\n            console.log(formData);\n            axios({\n              url: \"https://\" + host + \".ngrok.io/show_images/\",\n              data: formData,\n              headers: {\n                \"Content-Type\": \"multipart/form-data\"\n              },\n              method: \"POST\",\n              timeout: 2 * 60 * 1000\n            }).then(function (res) {\n              var set_datePost_convert = res[\"data\"][\"data\"][\"date_post\"];\n              var dateTime = new Date(set_datePost_convert);\n              var converted_date = moment(dateTime).format(\"MMMM Do YYYY hh:MM:ss\");\n              set_datePost(converted_date);\n              set_Type(res[\"data\"][\"data\"][\"types\"]);\n              set_id_Client(res[\"data\"][\"data\"][\"id_client\"]);\n              set_Predict(res[\"data\"][\"data\"][\"predict\"]);\n            }).catch(function (_ref2) {\n              var response = _ref2.response;\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    Platform.OS === \"android\" ? setUri(route.params.uri.uri) : setUri(route.params.uri.uri.replace(\"file://\", \"\"));\n  }, []);\n  useEffect(function () {\n    if (image) submitHandle();\n  }, [image]);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: route.params.uri.uri\n    },\n    style: {\n      width: W,\n      height: W * 4 / 3\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: style.sty_Text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Date_Post: \", datePost)), React.createElement(View, {\n    style: style.sty_Text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Type: \", type_)), React.createElement(View, {\n    style: style.sty_Text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Predict: \", predict)));\n};\n\nexport default ResultScreen;\nvar style = StyleSheet.create({\n  sty_Text: {\n    marginTop: hp(\"5%\"),\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/84913/Desktop/crabcounting/front-end/src/screens/result/index.js"],"names":["React","useState","useEffect","useContext","axios","moment","widthPercentageToDP","wp","heightPercentageToDP","hp","Context","W","Dimensions","get","width","ResultScreen","route","navigation","image","setUri","host","datePost","set_datePost","type_","set_Type","id_Client","set_id_Client","predict","set_Predict","submitHandle","formData","FormData","append","uri","type","name","unix","console","log","url","data","headers","method","timeout","then","res","set_datePost_convert","dateTime","Date","converted_date","format","catch","response","Platform","OS","params","replace","height","style","sty_Text","StyleSheet","create","marginTop","justifyContent","alignItems","flex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Platform, StyleSheet, Dimensions } from \"react-native\";\r\nimport {\r\n  SafeAreaView,\r\n  View,\r\n  Image,\r\n  Text,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport {\r\n  widthPercentageToDP as wp,\r\n  heightPercentageToDP as hp,\r\n} from \"react-native-responsive-screen\";\r\nimport { Context } from \"../../context\";\r\n\r\nconst W = Dimensions.get(\"window\").width;\r\nconst ResultScreen = ({ route, navigation }) => {\r\n  const [image, setUri] = useState();\r\n  const { host } = useContext(Context);\r\n  const [datePost, set_datePost] = useState();\r\n  const [type_, set_Type] = useState();\r\n  const [id_Client, set_id_Client] = useState();\r\n  const [predict, set_Predict] = useState();\r\n\r\n  const submitHandle = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", {\r\n      uri: image,\r\n      type: \"image/jpeg\",\r\n      name: \"image.jpg\",\r\n    });\r\n    formData.append(\"id_client\", 1);\r\n    formData.append(\"date_post\", moment().unix());\r\n    formData.append(\"types\", \"jpg\");\r\n    console.log(formData);\r\n\r\n    //   fetch(uploadUrl, {\r\n    //     method: 'POST',\r\n    //     body: formData\r\n    //     })\r\n    //     .then(response => response.json())\r\n    //     .then(response => {\r\n    //       console.log('upload succes', response);\r\n    //       alert('Upload success!');\r\n    //     })\r\n    //     .catch(error => {\r\n    //       console.log('upload error', error);\r\n    //       alert('Upload failed!');\r\n    //     });\r\n    // }\r\n    axios({\r\n      url: `https://${host}.ngrok.io/show_images/`,\r\n      data: formData,\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      method: \"POST\",\r\n      timeout: 2 * 60 * 1000,\r\n    })\r\n      .then((res) => {\r\n        var set_datePost_convert = res[\"data\"][\"data\"][\"date_post\"];\r\n        var dateTime = new Date(set_datePost_convert);\r\n        // Returns \"2013-05-31T11:54:44.000Z\"\r\n        var converted_date = moment(dateTime).format(\"MMMM Do YYYY hh:MM:ss\");\r\n        set_datePost(converted_date);\r\n        set_Type(res[\"data\"][\"data\"][\"types\"]);\r\n        set_id_Client(res[\"data\"][\"data\"][\"id_client\"]);\r\n        set_Predict(res[\"data\"][\"data\"][\"predict\"]);\r\n      })\r\n      .catch(({ response }) => {\r\n        //   console.log(\"ponse\", response);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    Platform.OS === \"android\"\r\n      ? setUri(route.params.uri.uri)\r\n      : setUri(route.params.uri.uri.replace(\"file://\", \"\"));\r\n  }, []);\r\n  useEffect(() => {\r\n    if (image) submitHandle();\r\n  }, [image]);\r\n\r\n  return (\r\n    <View>\r\n      <Image\r\n        source={{ uri: route.params.uri.uri }}\r\n        style={{ width: W, height: (W * 4) / 3 }}\r\n      />\r\n      <View style={style.sty_Text}>\r\n        <Text style>Date_Post: {datePost}</Text>\r\n      </View>\r\n      <View style={style.sty_Text}>\r\n        <Text style>Type: {type_}</Text>\r\n      </View>\r\n\r\n      <View style={style.sty_Text}>\r\n        <Text style>Predict: {predict}</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\nexport default ResultScreen;\r\nvar style = StyleSheet.create({\r\n  sty_Text: {\r\n    marginTop: hp(\"5%\"),\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}