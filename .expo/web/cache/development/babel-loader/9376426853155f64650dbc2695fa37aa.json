{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\84913\\\\Desktop\\\\crabcounting\\\\front-end\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport * as Font from \"expo-font\";\nimport Navigation from \"./src/navigation\";\nimport HostProvider from \"./src/context\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport { AppLoading } from \"expo\";\n\nfunction cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return Font.loadAsync(font);\n  });\n}\n\nvar AppContainer = function (_React$Component) {\n  _inherits(AppContainer, _React$Component);\n\n  var _super = _createSuper(AppContainer);\n\n  function AppContainer() {\n    var _this;\n\n    _classCallCheck(this, AppContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isReady: false\n    };\n    return _this;\n  }\n\n  _createClass(AppContainer, [{\n    key: \"_loadAssetsAsync\",\n    value: function _loadAssetsAsync() {\n      var fontAssets;\n      return _regeneratorRuntime.async(function _loadAssetsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fontAssets = cacheFonts([FontAwesome.font]);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Promise.all(_toConsumableArray(fontAssets)));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.isReady) {\n        return React.createElement(AppLoading, {\n          startAsync: this._loadAssetsAsync,\n          onFinish: function onFinish() {\n            return _this2.setState({\n              isReady: true\n            });\n          },\n          onError: console.warn,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return React.createElement(HostProvider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      }, React.createElement(Navigation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return AppContainer;\n}(React.Component);\n\nexport { AppContainer as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/84913/Desktop/crabcounting/front-end/App.js"],"names":["React","Font","Navigation","HostProvider","FontAwesome","AppLoading","cacheFonts","fonts","map","font","loadAsync","AppContainer","state","isReady","fontAssets","Promise","all","_loadAssetsAsync","setState","console","warn","Component","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP;AAEA,OAAOC,YAAP;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,UAAT,QAA2B,MAA3B;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAOA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUR,IAAI,CAACS,SAAL,CAAeD,IAAf,CAAV;AAAA,GAAV,CAAP;AACD;;IACoBE,Y;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE;AADH,K;;;;;;;;;;;;AAKAC,cAAAA,U,GAAaR,UAAU,CAAC,CAACF,WAAW,CAACK,IAAb,CAAD,C;;+CAEvBM,OAAO,CAACC,GAAR,oBAAgBF,UAAhB,E;;;;;;;;;;;6BAGC;AAAA;;AACP,UAAI,CAAC,KAAKF,KAAL,CAAWC,OAAhB,EAAyB;AACvB,eACE,oBAAC,UAAD;AACE,UAAA,UAAU,EAAE,KAAKI,gBADnB;AAEE,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACC,QAAL,CAAc;AAAEL,cAAAA,OAAO,EAAE;AAAX,aAAd,CAAN;AAAA,WAFZ;AAGE,UAAA,OAAO,EAAEM,OAAO,CAACC,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAED,aACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EA3BuCpB,KAAK,CAACqB,S;;SAA3BV,Y;AA8BrB,IAAMW,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text, View, SafeAreaView } from \"react-native\";\r\nimport * as Font from \"expo-font\";\r\nimport Navigation from \"./src/navigation\";\r\n\r\nimport HostProvider from \"./src/context\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport { AppLoading } from \"expo\";\r\nfunction cacheFonts(fonts) {\r\n  return fonts.map((font) => Font.loadAsync(font));\r\n}\r\nexport default class AppContainer extends React.Component {\r\n  state = {\r\n    isReady: false,\r\n  };\r\n\r\n  async _loadAssetsAsync() {\r\n    const fontAssets = cacheFonts([FontAwesome.font]);\r\n\r\n    await Promise.all([...fontAssets]);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isReady) {\r\n      return (\r\n        <AppLoading\r\n          startAsync={this._loadAssetsAsync}\r\n          onFinish={() => this.setState({ isReady: true })}\r\n          onError={console.warn}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <HostProvider>\r\n        <Navigation />\r\n      </HostProvider>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}